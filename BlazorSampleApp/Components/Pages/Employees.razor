@page "/Employees"

@rendermode InteractiveServer

@using DatabaseAccessLib
@using Radzen
@using Radzen.Blazor
@inject DialogService DialogService
@inject IDataAccessAPI DataAccessAPI;

<Radzen.Blazor.RadzenDialog />
<Radzen.Blazor.RadzenNotification />
<Radzen.Blazor.RadzenContextMenu />
<Radzen.Blazor.RadzenTooltip />
<Radzen.Blazor.RadzenTabs />

<PageTitle>Employees</PageTitle>


<RadzenSplitter Orientation="Orientation.Horizontal" >
    <RadzenSplitterPane Size="60%" Resizable=true>

        <RadzenText Style="font-size: 12pt; font-weight:bold">List of Employees</RadzenText>

        <RadzenDataGrid @ref=@radzenDataGrid
                        AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true"
                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        TItem="EmployeeDTO" Data="@AllEmployees" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                        SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedEmployee
                        RowSelect="UserRowSelected"
                        RowDeselect="UserRowDeselected"
                        RowDoubleClick="UserRowEdit">
            <Columns>
                <RadzenDataGridColumn Property="EmployeeID" Title="ID" Frozen="true" Width="30px" />
                <RadzenDataGridColumn Property="LastName" Title="Last" Width="50px" />
                <RadzenDataGridColumn Property="FirstName" Title="First" Width="50px" />
                <RadzenDataGridColumn Property="HireDate" Title="Date Of Hire" Width="60px" FormatString="{0:MMMM dd, yyyy}" />
                <RadzenDataGridColumn Property="Address" Title="Address" Width="80px" />
                <RadzenDataGridColumn Property="City" Title="City" Width="50px" />
                <RadzenDataGridColumn Property="Region" Title="State" Width="30px" />
                <RadzenDataGridColumn TItem="EmployeeDTO" Property="" Title="" SortOrder="SortOrder.Descending" Width="80px">
                    <Template Context="selectedEmployee">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Medium" Text="Orders" Click="@(() => ShowOrdersByEmployeeClick(selectedEmployee))" />
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
  
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="40%" Resizable=true>

        <RadzenText Style="font-size: 12pt; font-weight:bold">@OrdersByEmployeeTitle</RadzenText>

        <RadzenDataGrid ColumnWidth="150px" AllowFiltering="false" AllowPaging="true"
                        PageSize="15" AllowSorting="true" Data="@OrdersByEmployee" TItem="OrderDTO">
            <Columns>
                <RadzenDataGridColumn Property="OrderID" Title="ID" Frozen="true" Width="30px" />
                <RadzenDataGridColumn Property="Customer.CompanyName" Title="Customer Name" Width="160px" />
                <RadzenDataGridColumn Property="OrderDate" Title="Order Date" Width="120px" FormatString="{0:MMMM dd, yyyy}" />
                <RadzenDataGridColumn Property="RequiredDate" Title="Required Date" Width="120px" FormatString="{0:MMMM dd, yyyy}" />
                <RadzenDataGridColumn Property="ShippedDate" Title="Shipped Date" Width="120px" FormatString="{0:MMMM dd, yyyy}" />
            </Columns>
        </RadzenDataGrid>
    </RadzenSplitterPane>
</RadzenSplitter>



@code {
    RadzenDataGrid<EmployeeDTO> radzenDataGrid;
    IList<EmployeeDTO> selectedEmployee;

    IEnumerable<EmployeeDTO> AllEmployees;

    IEnumerable<OrderDTO> OrdersByEmployee;

    string OrdersByEmployeeTitle;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AllEmployees = DataAccessAPI.GetAllEmployees();

    }

    private async void ShowOrdersByEmployeeClick(EmployeeDTO employee)
    {
        OrdersByEmployeeTitle = $"Sales orders for {employee.FirstName} {employee.LastName}";
        OrdersByEmployee = DataAccessAPI.GetOrdersByEmployeeID(employee.EmployeeID);
        return;
    }


    private async void UserRowSelected(EmployeeDTO employee)
    {
        //OrdersByEmployee = DataAccessAPI.GetOrdersByEmployeeID(employee.EmployeeID);
        return;
    }

    private async void UserRowDeselected(EmployeeDTO user)
    {
        return;
    }

    private async void UserRowEdit(DataGridRowMouseEventArgs<EmployeeDTO> args)
    {
   
    }

}