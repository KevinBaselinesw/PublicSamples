@page "/CreateNewOrder"

@rendermode InteractiveServer

@using DatabaseAccessLib
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel
@using System.Runtime.CompilerServices
@using System.Collections.ObjectModel
@inject DialogService DialogService
@inject IDataAccessAPI DataAccessAPI;

<Radzen.Blazor.RadzenDialog />
<Radzen.Blazor.RadzenNotification />
<Radzen.Blazor.RadzenContextMenu />
<Radzen.Blazor.RadzenTooltip />
<Radzen.Blazor.RadzenTabs />

<RadzenTemplateForm TItem="OrderDTO"  Submit="@OnSubmit">

    <RadzenStack Orientation = "Orientation.Horizontal">

        <RadzenStack>
            <RadzenLabel Text="Salesman" Component="SalesmanDropDown" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Context="EmployeeDropDownContext" @bind-Value=@employeeModel.EmployeeID Data=@AllEmployees Style="width: 100%; max-width: 400px;" Name="SalesmanDropDown" ValueProperty="@nameof(EmployeeDTO.EmployeeID)">
                <Template>
                    @((EmployeeDropDownContext as EmployeeDTO).LastName), @((EmployeeDropDownContext as EmployeeDTO).FirstName)
                </Template>
            </RadzenDropDown>
        </RadzenStack>

        <RadzenStack>
            <RadzenLabel Text="Customer" Component="CustomerDropDown" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Context="CustomerDropDownContext" @bind-Value=@customerModel.CustomerID Data=@AllCustomers Style="width: 100%; max-width: 400px;" Name="CustomerDropDown" ValueProperty="@nameof(CustomerDTO.CustomerID)">
                <Template>
                    @((CustomerDropDownContext as CustomerDTO).CompanyName)
                </Template>
            </RadzenDropDown>
        </RadzenStack>

        <RadzenStack>
            <RadzenLabel Text="Shipper" Component="ShipperDropDown" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Context="ShipperDropDownContext" @bind-Value=@shipperModel.ShipperID Data=@AllShippers Style="width: 100%; max-width: 400px;" Name="ShipperDropDown" ValueProperty="@nameof(ShipperDTO.ShipperID)">
                <Template>
                    @((ShipperDropDownContext as ShipperDTO).CompanyName)
                </Template>
            </RadzenDropDown>
            <RadzenDatePicker @bind-Value=@shippingDate Name="RadzenDatePickerBindValue" ShowCalendarWeek />
        </RadzenStack>


    </RadzenStack>

    <RadzenDataGrid @ref=@dgNewOrder ColumnWidth="150px" AllowFiltering="false" AllowPaging="true"
                    PageSize="8" AllowSorting="true" Data="@EnteredProducts" TItem="CreateNewOrderInfo"
                    RowSelect=@NewOrderRowSelected>
          <Columns>
                    <RadzenDataGridColumn Property="ProductID" Title="ID" Visible=false />

                    <RadzenDataGridColumn Context="productitem" Title="Product Name">
                        <Template>
                            <RadzenDropDown Style="width: 100%;" 
                                    @bind-Value="@productitem.ProductID" Data="@AllProducts" TextProperty="ProductName" ValueProperty="ProductID" 
                                    Change="@NewOrderProductChanged"
                                    AllowClear=true Placeholder="" />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Context="productitem" Title="Qty Ordered" >
                        <Template>
                            <RadzenTextBox Style="width: 100%;" 
                                    TextProperty="Quantity" ValueProperty="Quantity" 
                                    Change="@NewOrderQuantityChanged"
                                    />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="UnitPrice" Title="Unit Price" />
                    <RadzenDataGridColumn Property="SubTotal" Title="Sub Total" />
                </Columns>
    </RadzenDataGrid>
    <RadzenButton ButtonStyle=ButtonStyle.Secondary Image="Images/plus32.png" Style="height: 40px; width: 40px; margin: 10px" class="text-left" Click=@(args => AddNewProductItem()) />

    <RadzenText Text=@OrderTotalTB Margin="10"/>

    <RadzenButton Text="Save" Click=@(args => Submit()) />


</RadzenTemplateForm>


@code {

    RadzenDataGrid<CreateNewOrderInfo> dgNewOrder;
    string OrderTotalTB;
    ObservableCollection<CreateNewOrderInfo> EnteredProducts;

    OrderDTO OrderDTO = new OrderDTO();
    EmployeeDTO employeeModel = new EmployeeDTO();
    CustomerDTO customerModel = new CustomerDTO();
    ShipperDTO shipperModel = new ShipperDTO();
    DateTime? shippingDate ;

    string value = "";
    IEnumerable<EmployeeDTO> AllEmployees;
    IEnumerable<CustomerDTO> AllCustomers;
    IEnumerable<ShipperDTO> AllShippers;
    IEnumerable<ProductDTO> AllProducts;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AllEmployees = DataAccessAPI.GetAllEmployees();
        AllCustomers = DataAccessAPI.GetAllCustomers();
        AllShippers = DataAccessAPI.GetAllShippers();
        AllProducts = DataAccessAPI.GetAllProducts();

        EnteredProducts = new ObservableCollection<CreateNewOrderInfo>();
        return;

    }

    private CreateNewOrderInfo? CurrentOrder = null;
    private void NewOrderRowSelected(CreateNewOrderInfo CurrentOrder)
    {
        this.CurrentOrder = CurrentOrder;
    }


    void NewOrderProductChanged(object value)
    {
        int ProductID = (int)value;

        ProductDTO? SelectedProduct = AllProducts.FirstOrDefault(t => t.ProductID == ProductID);
        if (SelectedProduct != null)
        {
            if (CurrentOrder != null)
            {
                CurrentOrder.ProductID = SelectedProduct.ProductID;
                CurrentOrder.UnitPrice = SelectedProduct.UnitPrice;
            }
        }


    }

    void NewOrderQuantityChanged(object value)
    {
        string sQuantity = (string)value;
        short Quantity = 0;

        if (CurrentOrder != null)
        {
            if (short.TryParse(sQuantity, out Quantity))
            {
                CurrentOrder.Quantity = Quantity;
                CurrentOrder.SubTotal = CurrentOrder.UnitPrice * CurrentOrder.Quantity;
            }
            else
            {
                CurrentOrder.Quantity = 0;
                CurrentOrder.SubTotal = CurrentOrder.UnitPrice * CurrentOrder.Quantity;
            }



            decimal OrderTotal = 0;
            foreach (var enteredProduct in EnteredProducts)
            {
                if (enteredProduct.SubTotal != null)
                {
                    OrderTotal += enteredProduct.SubTotal.Value;
                }
            }

            OrderTotalTB = string.Format("Order Total: ${0:0.00}", OrderTotal);

        }




    }

    async Task OnSubmit(OrderDTO model)
    {
        await Task.Delay(0);
    }

    void LoadData(LoadDataArgs args)
    {
        return;
    }

    private void RowRender(RowRenderEventArgs<CreateNewOrderInfo> args)
    {
        return;
    }

    private async void AddNewProductItem()
    {
        EnteredProducts.Add(new CreateNewOrderInfo());

        await dgNewOrder.SelectRow(EnteredProducts[EnteredProducts.Count() - 1], true);
    }


    private void Submit()
    {
        // ComboBoxEmployee cbe = SalesmanCB.SelectedValue as ComboBoxEmployee;
        // if (cbe == null)
        // {
        //     MessageBox.Show("Must select an employee for this order", "Create New Order", MessageBoxButton.OK);
        //     return;
        // }

        // CustomerDTO customer = CustomerCB.SelectedValue as CustomerDTO;
        // if (customer == null)
        // {
        //     MessageBox.Show("Must select a customer for this order", "Create New Order", MessageBoxButton.OK);
        //     return;
        // }

        // ShipperDTO shipper = ShipperCB.SelectedValue as ShipperDTO;
        // if (shipper == null)
        // {
        //     MessageBox.Show("Must select a shipper for this order", "Create New Order", MessageBoxButton.OK);
        //     return;
        // }

        // if (EnteredProducts == null || EnteredProducts.Count() == 0)
        // {
        //     MessageBox.Show("No products have been entered for this order", "Create New Order", MessageBoxButton.OK);
        //     return;
        // }


        OrderDTO newOrder = new OrderDTO();
        newOrder.EmployeeID = employeeModel.EmployeeID;
        newOrder.CustomerID = customerModel.CustomerID;
        newOrder.OrderDate = DateTime.Now;
        newOrder.RequiredDate = shippingDate;

        newOrder.ShipVia = shipperModel.ShipperID;

        if (ValidateEnteredOrderDetails() < 0)
            return;

        newOrder.Order_Details = EnteredOrderDetails();

        // Fill out the rest of the order.  Doesn't appear to be used
        newOrder.Freight = 9.99m;
        newOrder.ShipName = "Kevin McKenna";
        newOrder.ShipAddress = "1600 Pennsylvania Avenue";
        newOrder.ShipCity = "Washington";
        newOrder.ShipRegion = "DC";
        newOrder.ShipPostalCode = "99999";
        newOrder.ShipCountry = "USA";
        // Fill out the rest of the order.  Doesn't appear to be used

        newOrder = DataAccessAPI.CreateNewOrder(newOrder);
        if (newOrder != null && newOrder.OrderID > 0)
        {
            //MessageBox.Show("Order successfully added to system", "Create New Order", MessageBoxButton.OK);
            //SaveOrderButton.IsEnabled = false;
        }
        else
        {
            //MessageBox.Show("Order not added to database!", "Create New Order", MessageBoxButton.OK);
        }

        return;
    }

    private int ValidateEnteredOrderDetails()
    {
        // foreach (var enteredProduct in EnteredProducts)
        // {
        //     if (enteredProduct.ProductID <= 0)
        //         continue;

        //     if (enteredProduct.Quantity == null || enteredProduct.Quantity <= 0)
        //     {
        //         MessageBox.Show($"{enteredProduct.ProductName} has an invalid quantity!");
        //         return -1;
        //     }

        //     if (enteredProduct.SubTotal == null || enteredProduct.SubTotal <= 0)
        //     {
        //         MessageBox.Show($"{enteredProduct.ProductName} has an invalid subtotal!");
        //         return -1;
        //     }

        // }

        // EnteredProducts = new ObservableCollection<CreateNewOrderInfo>(EnteredProducts.Where(t => t.ProductID > 0));
        return 0;
    }

    private List<Order_DetailDTO> EnteredOrderDetails()
    {
        List<Order_DetailDTO> EnteredOrders = new List<Order_DetailDTO>();

        foreach (var enteredProduct in EnteredProducts)
        {
            Order_DetailDTO Order = new Order_DetailDTO();
            Order.ProductID = enteredProduct.ProductID;
            Order.Quantity = enteredProduct.Quantity.Value;
            Order.UnitPrice = enteredProduct.UnitPrice.Value;
            Order.Discount = 0.0f;
            EnteredOrders.Add(Order);
        }
          

        return EnteredOrders;
    }

 
    public class CreateNewOrderInfo : INotifyPropertyChanged
    {
        public CreateNewOrderInfo()
        {
        }

        // INotifyPropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        // INotifyPropertyChanged

        private int _ProductID;
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }

            set
            {
                if (value != this._ProductID)
                {
                    this._ProductID = value;
                    NotifyPropertyChanged();
                }
            }
        }

        public string ProductName { get; set; }

        public short? _Quantity;
        public short? Quantity
        {
            get
            {
                return this._Quantity;
            }

            set
            {
                if (value != this._Quantity)
                {
                    this._Quantity = value;
                    NotifyPropertyChanged();
                }
            }
        }

        private decimal? _UnitPrice;
        public decimal? UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }

            set
            {
                if (value != this._UnitPrice)
                {
                    this._UnitPrice = value;
                    NotifyPropertyChanged();
                }
            }
        }

        private decimal? _SubTotal;
        public decimal? SubTotal
        {
            get
            {
                return this._SubTotal;
            }

            set
            {
                if (value != this._SubTotal)
                {
                    this._SubTotal = value;
                    NotifyPropertyChanged();
                }
            }
        }


    }

   
}
